---
export interface Props {
  trigger?: 'hover' | 'click' | 'scroll';
  revealText?: string;
  hideText?: string;
  revealDelay?: number;
  hideDelay?: number;
  maskStyle?: 'blur' | 'fade' | 'ink' | 'veil';
  className?: string;
  id?: string;
}

const { 
  trigger = 'hover',
  revealText = 'Touch to reveal',
  hideText = 'Secret content hidden',
  revealDelay = 0,
  hideDelay = 500,
  maskStyle = 'veil',
  className = '',
  id = `secret-content-${Math.random().toString(36).substr(2, 9)}`
} = Astro.props;
---

<div 
  class={`secret-content secret-content-${trigger} secret-content-${maskStyle} ${className}`}
  id={id}
  data-trigger={trigger}
  data-reveal-text={revealText}
  data-hide-text={hideText}
  data-reveal-delay={revealDelay}
  data-hide-delay={hideDelay}
  data-mask-style={maskStyle}
>
  <!-- Hidden content -->
  <div class="secret-content-hidden">
    <slot />
  </div>
  
  <!-- Reveal overlay -->
  <div class="secret-content-overlay">
    <div class="secret-content-mask"></div>
    <div class="secret-content-hint">
      <span class="hint-text">{revealText}</span>
      <div class="hint-decoration">
        <span class="hint-dots">•••</span>
      </div>
    </div>
  </div>
  
  <!-- Magical reveal effect -->
  <div class="secret-content-magic">
    <div class="magic-particles"></div>
    <div class="magic-shimmer"></div>
  </div>
</div>

<style>
  .secret-content {
    position: relative;
    display: inline-block;
    border-radius: 8px;
    transition: all 0.3s ease;
    cursor: pointer;
  }
  
  .secret-content-hidden {
    position: relative;
    z-index: 1;
    transition: all 0.5s ease;
  }
  
  .secret-content-overlay {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    z-index: 2;
    display: flex;
    align-items: center;
    justify-content: center;
    text-align: center;
    border-radius: inherit;
    transition: all 0.4s ease;
}

.secret-content-mask {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    border-radius: inherit;
    transition: all 0.4s ease;
  }
  
  .secret-content-hint {
    position: relative;
    z-index: 3;
    color: #D4A5A5;
    font-size: 0.9em;
    font-style: italic;
    text-shadow: 0 1px 2px rgba(0, 0, 0, 0.5);
    transition: all 0.3s ease;
  }
  
  .hint-text {
    display: block;
    margin-bottom: 0.5rem;
  }
  
  .hint-decoration {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
  }
  
  .hint-dots {
    font-size: 1.2em;
    color: #FFD700;
    animation: pulse 4s infinite;
  }
  
  .secret-content-magic {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    z-index: 4;
    pointer-events: none;
    opacity: 0;
    transition: opacity 0.3s ease;
  }
  
  .magic-particles {
    position: absolute;
    /* top: 20px; */
    left: 0;
    right: 0;
    bottom: 0;
    background: url("data:image/svg+xml,%3Csvg width='20' height='20' viewBox='0 0 20 20' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='%23FFD700' fill-opacity='0.3'%3E%3Ccircle cx='3' cy='3' r='0.5'/%3E%3Ccircle cx='13' cy='13' r='0.5'/%3E%3Ccircle cx='10' cy='5' r='0.5'/%3E%3Ccircle cx='17' cy='8' r='0.5'/%3E%3Ccircle cx='7' cy='16' r='0.5'/%3E%3C/g%3E%3C/svg%3E") repeat;
    animation: float 3s infinite;
  }
  
  .magic-shimmer {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: linear-gradient(
      45deg,
      transparent 30%,
      rgba(255, 215, 0, 0.1) 50%,
      transparent 70%
    );
    background-size: 200% 200%;
    animation: shimmer 8s infinite;
  }
  
  /* Mask styles */
  .secret-content-blur .secret-content-mask {
    backdrop-filter: blur(5px);
    background: rgba(10, 10, 10, 0.7);
    transition: all .3s ease-in;
  }
  
  .secret-content-fade .secret-content-mask {
    background: rgba(10, 10, 10, 0.9);
  }
  
  .secret-content-ink .secret-content-mask {
    background: radial-gradient(
      ellipse at center,
      rgba(74, 14, 78, 0.9) 0%,
      rgba(10, 10, 10, 0.7) 70%
    );
  }
  
  .secret-content-veil .secret-content-mask {
    background: linear-gradient(
      135deg,
      rgba(212, 165, 165, 0.1) 0%,
      rgba(74, 14, 78, 0.9) 15%,
      rgba(10, 10, 10, 0.9) 90%
    );
  }
  
  /* Trigger states */
  .secret-content.revealed .secret-content-overlay {
    opacity: 0;
    transform: scale(0.8);
  }
  
  .secret-content.revealed .secret-content-hidden {
    filter: none;
    opacity: 1;
  }
  
  .secret-content.revealed .secret-content-magic {
    opacity: 1;
  }
  
  /* Hover trigger */
  .secret-content-hover:hover .secret-content-overlay {
    opacity: 0;
    transform: scale(0.8);
  }
  
  .secret-content-hover:hover .secret-content-hidden {
    filter: none;
    opacity: 1;
  }
  
  .secret-content-hover:hover .secret-content-magic {
    opacity: 1;
  }
  
  /* Click trigger */
  .secret-content-click .secret-content-overlay {
    cursor: pointer;
  }
  
  .secret-content-click .secret-content-hint::after {
    content: ' (click to reveal)';
    font-size: 0.8em;
    opacity: 0.7;
  }
  
  /* Scroll trigger */
  .secret-content-scroll .secret-content-hint::after {
    content: ' (scroll to reveal)';
    font-size: 0.8em;
    opacity: 0.7;
  }
  
  /* Animations */
  @keyframes pulse {
    0%, 100% { opacity: 0.5; }
    50% { opacity: 1; }
  }
  
  @keyframes float {
    0%, 100% { transform: translateY(0px); }
    50% { transform: translateY(-10px); }
  }
  
  @keyframes shimmer {
    0% { background-position: 0% 0%; }
    50% { background-position: 100% 100%; }
    100% { background-position: 0% 0%; }
  }
  
  /* Accessibility */
  .secret-content:focus-visible {
    outline: 2px solid #FFD700;
    outline-offset: 2px;
  }
  
  .secret-content:focus-visible .secret-content-overlay {
    opacity: 0;
    transform: scale(0.8);
  }
  
  .secret-content:focus-visible .secret-content-hidden {
    filter: none;
    opacity: 1;
  }
  
  .secret-content:focus-visible .secret-content-magic {
    opacity: 1;
  }
  
  /* Reduced motion */
  @media (prefers-reduced-motion: reduce) {
    .secret-content,
    .secret-content-hidden,
    .secret-content-overlay,
    .secret-content-mask,
    .secret-content-hint,
    .secret-content-magic {
      transition: none;
      animation: none;
    }
  }
</style>

<script>
  class SecretContent {
    constructor(element) {
      this.element = element;
      this.trigger = element.dataset.trigger || 'hover';
      this.revealText = element.dataset.revealText || 'Touch to reveal';
      this.hideText = element.dataset.hideText || 'Secret content hidden';
      this.revealDelay = parseInt(element.dataset.revealDelay) || 0;
      this.hideDelay = parseInt(element.dataset.hideDelay) || 500;
      this.maskStyle = element.dataset.maskStyle || 'veil';
      this.isRevealed = false;
      this.revealTimer = null;
      this.hideTimer = null;
      
      this.init();
    }
    
    init() {
      switch (this.trigger) {
        case 'hover':
          this.setupHoverTrigger();
          break;
        case 'click':
          this.setupClickTrigger();
          break;
        case 'scroll':
          this.setupScrollTrigger();
          break;
      }
      
      // Add ARIA attributes for accessibility
      this.element.setAttribute('role', 'button');
      this.element.setAttribute('aria-label', this.revealText);
      this.element.setAttribute('tabindex', '0');
      
      // Keyboard support
      this.element.addEventListener('keydown', (e) => {
        if (e.key === 'Enter' || e.key === ' ') {
          e.preventDefault();
          this.toggle();
        }
      });
    }
    
    setupHoverTrigger() {
      this.element.addEventListener('mouseenter', () => {
        this.reveal();
      });
      
      this.element.addEventListener('mouseleave', () => {
        this.hide();
      });
      
      // Touch support
      this.element.addEventListener('touchstart', () => {
        this.reveal();
      });
      
      this.element.addEventListener('touchend', () => {
        setTimeout(() => this.hide(), 2000);
      });
    }
    
    setupClickTrigger() {
      this.element.addEventListener('click', () => {
        this.toggle();
      });
    }
    
    setupScrollTrigger() {
      const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
          if (entry.isIntersecting) {
            this.reveal();
          } else {
            this.hide();
          }
        });
      }, {
        threshold: 0.5,
        rootMargin: '0px 0px -100px 0px'
      });
      
      observer.observe(this.element);
    }
    
    reveal() {
      if (this.isRevealed) return;
      
      clearTimeout(this.hideTimer);
      
      this.revealTimer = setTimeout(() => {
        this.isRevealed = true;
        this.element.classList.add('revealed');
        this.element.setAttribute('aria-label', this.hideText);
        
        // Trigger custom event
        this.element.dispatchEvent(new CustomEvent('secret-revealed', {
          detail: { content: this.element.querySelector('.secret-content-hidden').innerHTML }
        }));
      }, this.revealDelay);
    }
    
    hide() {
      if (!this.isRevealed) return;
      
      clearTimeout(this.revealTimer);
      
      this.hideTimer = setTimeout(() => {
        this.isRevealed = false;
        this.element.classList.remove('revealed');
        this.element.setAttribute('aria-label', this.revealText);
        
        // Trigger custom event
        this.element.dispatchEvent(new CustomEvent('secret-hidden', {
          detail: { content: this.element.querySelector('.secret-content-hidden').innerHTML }
        }));
      }, this.hideDelay);
    }
    
    toggle() {
      if (this.isRevealed) {
        this.hide();
      } else {
        this.reveal();
      }
    }
    
    reset() {
      clearTimeout(this.revealTimer);
      clearTimeout(this.hideTimer);
      this.isRevealed = false;
      this.element.classList.remove('revealed');
      this.element.setAttribute('aria-label', this.revealText);
    }
  }
  
  // Initialize all secret content elements
  document.addEventListener('DOMContentLoaded', () => {
    const secretElements = document.querySelectorAll('.secret-content');
    secretElements.forEach(element => {
      new SecretContent(element);
    });
  });
  
  // Re-initialize on navigation (for SPAs)
  document.addEventListener('astro:page-load', () => {
    const secretElements = document.querySelectorAll('.secret-content');
    secretElements.forEach(element => {
      if (!element.secretContentInstance) {
        element.secretContentInstance = new SecretContent(element);
      }
    });
  });
</script>